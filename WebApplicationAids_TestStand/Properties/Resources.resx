<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERRMSG_ERROR_STOP_TEST" xml:space="preserve">
    <value>Testing the Error Stop</value>
  </data>
  <data name="ERRMSG_EXCEPTION_FOR_TRACE" xml:space="preserve">
    <value>{0}: An {1} exception occurred in routine {2}{6}                         Message            = {3}{6}                         Console.CursorLeft = {4}{6}                         Console.CursorTop  = {5}</value>
    <comment>The ExerciseColorExceptionReporting routine constructs a detailed report about its internal state when an I/O error occurs when it attempts to clear the console window when the standard output stream is redirected to a file.</comment>
  </data>
  <data name="ERRMSG_INVALID_OUTPUT_FORMAT" xml:space="preserve">
    <value>{2}The specified output format, {0}, is invalid, and will be ignored.{2}    The default value, {1}, will be used.{2}</value>
    <comment>The exception handler in SetOutputFormat  constructs a message to display on the console from this template.</comment>
  </data>
  <data name="ERRMSG_RUNTIME" xml:space="preserve">
    <value>A run-time exception has occurred.</value>
    <comment>Exit code 1 is reserved for reporting miscellaneous run-time exceptions.</comment>
  </data>
  <data name="ERRMSG_SUCCESS" xml:space="preserve">
    <value>The task completed successfully.</value>
    <comment>This message is never written; it is a place holder for exit code zero in the table of error messages that is loaded into the state manager singleton.</comment>
  </data>
  <data name="MSG_BEGIN" xml:space="preserve">
    <value>Begin</value>
  </data>
  <data name="MSG_CASE" xml:space="preserve">
    <value>    Overload {0}: </value>
  </data>
  <data name="MSG_END" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="MSG_ERROR_REPORTING_TEST" xml:space="preserve">
    <value>{3}Error reporting test {0} of {1} {2}{3}</value>
  </data>
  <data name="MSG_EXAMPLE_DEFAULT_COLOR" xml:space="preserve">
    <value>the default</value>
  </data>
  <data name="MSG_EXAMPLE_ERROR" xml:space="preserve">
    <value>This error message appears in {0} text on {1} background.</value>
  </data>
  <data name="MSG_FORMAT_13" xml:space="preserve">
    <value>object arg0: object arg0 = {0}</value>
  </data>
  <data name="MSG_FORMAT_14" xml:space="preserve">
    <value>params object [ ] arg: params object [ ] arg = {0}</value>
  </data>
  <data name="MSG_FORMAT_16" xml:space="preserve">
    <value>object arg0, object arg1: object arg0 = {0}, object arg1 = {1}</value>
  </data>
  <data name="MSG_FORMAT_17" xml:space="preserve">
    <value>object arg0 = {0}, object arg1 = {1}, object arg2 = {2}</value>
  </data>
  <data name="MSG_FORMAT_18" xml:space="preserve">
    <value>object arg0 = {0}, object arg1 = {1}, object arg2 = {2}, object arg3 = {3}</value>
  </data>
  <data name="MSG_PREPARE_CAMERA" xml:space="preserve">
    <value>Each of the next four screens displays all 18 overloads of a method.{0}The program pauses to allow you to capture each screen.{0}Press the Enter key when you are ready to see the first screen.</value>
  </data>
  <data name="MSG_PROMPT_FOR_PICTURE" xml:space="preserve">
    <value>Capture this screen, then press the ENTER key.</value>
  </data>
  <data name="MSG_SHOW_NEXT_EXAMPLE" xml:space="preserve">
    <value>{0}Press the ENTER key to display the next example.</value>
  </data>
  <data name="MSG_TIMED_ERROR_TEST" xml:space="preserve">
    <value>{0}Exercising the Timed Exit action of the ConsoleAppStateManager.ErrorExit method.{0}</value>
  </data>
  <data name="MSG_TIMED_STOP_PROMPT" xml:space="preserve">
    <value>To start the test in earnest, press the RETURN key.</value>
  </data>
  <data name="MSG_TIMED_STOP_TEST" xml:space="preserve">
    <value>{0}Exercising the Timed NormalExitAction of the ConsoleAppStateManager.NormalExit method.{0}</value>
  </data>
  <data name="MSG_WRITELINE_IN_COLOR_TESTS" xml:space="preserve">
    <value>{1}Instance MessageInColor.WriteLine() Tests {0}{1}</value>
  </data>
  <data name="MSG_WRITELINE_TESTS" xml:space="preserve">
    <value>{1}Static MessageInColor.RGBWriteLine() Tests {0}{1}</value>
  </data>
  <data name="MSG_WRITE_IN_COLOR_TESTS" xml:space="preserve">
    <value>{1}Instance MessageInColor.Write() Tests {0}{1}</value>
  </data>
  <data name="MSG_WRITE_TESTS" xml:space="preserve">
    <value>{1}Static MessageInColor.RGBWrite() Tests {0}{1}</value>
  </data>
  <data name="TIMED_WAIT_TEST_CASE_INFO" xml:space="preserve">
    <value>puintWaitSeconds,pstrCountdownWaitingFor,pclrTextColor,pclrTextBackgroundColor,penmInterruptCriterion</value>
  </data>
  <data name="TIMED_WAIT_TEST_CTOR_ARGNAME" xml:space="preserve">
    <value>pstrRecord</value>
    <comment>When there is a problem with the input string, the instance constructor throws an ArgumentException exception, using this string to identify the argument by name.</comment>
  </data>
  <data name="TIMED_WAIT_TEST_CTOR_ERROR_1" xml:space="preserve">
    <value>INTERNAL ERROR: There are too many fields in the label template.{2}Template String = {0}{3}First Extra Label = {1}{3}Offset of First Extra Label = {2}</value>
    <comment>This string is the template from which an exception message is constructed by the static constructor.</comment>
  </data>
  <data name="TIMED_WAIT_TEST_CTOR_ERROR_2" xml:space="preserve">
    <value>INTERNAL ERROR: The position of label {0} is undefined in template string {1}.</value>
    <comment>This string is the template from which an exception message is constructed by the static constructor.</comment>
  </data>
  <data name="TIMED_WAIT_TEST_CTOR_ERROR_3" xml:space="preserve">
    <value>String is invalid.{3}Contents of string   = {0}{3}Required Field Count = {1}{3}Actual Field Count   = {2}</value>
    <comment>This string is the template from which an exception message is constructed by the instance constructor.</comment>
  </data>
  <data name="TIMED_WAIT_TEST_DELIMITER" xml:space="preserve">
    <value>	</value>
    <comment>This is actually a single character, currently a TAB. See "Another Way to Escape Sequences in .NET Resource Files," at http://www.devx.com/tips/Tip/34769.</comment>
  </data>
  <data name="TIMED_WAIT_TEST_LABEL_TESTER_ERROR_4A" xml:space="preserve">
    <value>Label row is invalid.{1}Label Row              = {0}</value>
    <comment>This string is the first of two templates from which an exception message is constructed by the label row validation routine, a public static helper routine.</comment>
  </data>
  <data name="TIMED_WAIT_TEST_LABEL_TESTER_ERROR_4B" xml:space="preserve">
    <value>{2}Invalid Field Position = {0}{2}Invalid Field Value    = {1}</value>
    <comment>This string is the second of two templates from which an exception message is constructed by the label row validation routine, a public static helper routine. This string is used once for each invalid field, allowing a single pass to identify one or more of them.</comment>
  </data>
</root>